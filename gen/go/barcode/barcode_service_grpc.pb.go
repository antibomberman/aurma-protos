// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: barcode_service.proto

package barcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BarcodeService_GenerateBarcode_FullMethodName = "/barcode.BarcodeService/GenerateBarcode"
	BarcodeService_GetBarcode_FullMethodName      = "/barcode.BarcodeService/GetBarcode"
	BarcodeService_SearchBarcodes_FullMethodName  = "/barcode.BarcodeService/SearchBarcodes"
	BarcodeService_DeleteBarcode_FullMethodName   = "/barcode.BarcodeService/DeleteBarcode"
)

// BarcodeServiceClient is the client API for BarcodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarcodeServiceClient interface {
	GenerateBarcode(ctx context.Context, in *GenerateBarcodeRequest, opts ...grpc.CallOption) (*GenerateBarcodeResponse, error)
	GetBarcode(ctx context.Context, in *GetBarcodeRequest, opts ...grpc.CallOption) (*GetBarcodeResponse, error)
	SearchBarcodes(ctx context.Context, in *SearchBarcodesRequest, opts ...grpc.CallOption) (*SearchBarcodesResponse, error)
	DeleteBarcode(ctx context.Context, in *DeleteBarcodeRequest, opts ...grpc.CallOption) (*DeleteBarcodeResponse, error)
}

type barcodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarcodeServiceClient(cc grpc.ClientConnInterface) BarcodeServiceClient {
	return &barcodeServiceClient{cc}
}

func (c *barcodeServiceClient) GenerateBarcode(ctx context.Context, in *GenerateBarcodeRequest, opts ...grpc.CallOption) (*GenerateBarcodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateBarcodeResponse)
	err := c.cc.Invoke(ctx, BarcodeService_GenerateBarcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barcodeServiceClient) GetBarcode(ctx context.Context, in *GetBarcodeRequest, opts ...grpc.CallOption) (*GetBarcodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBarcodeResponse)
	err := c.cc.Invoke(ctx, BarcodeService_GetBarcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barcodeServiceClient) SearchBarcodes(ctx context.Context, in *SearchBarcodesRequest, opts ...grpc.CallOption) (*SearchBarcodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchBarcodesResponse)
	err := c.cc.Invoke(ctx, BarcodeService_SearchBarcodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barcodeServiceClient) DeleteBarcode(ctx context.Context, in *DeleteBarcodeRequest, opts ...grpc.CallOption) (*DeleteBarcodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBarcodeResponse)
	err := c.cc.Invoke(ctx, BarcodeService_DeleteBarcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarcodeServiceServer is the server API for BarcodeService service.
// All implementations must embed UnimplementedBarcodeServiceServer
// for forward compatibility.
type BarcodeServiceServer interface {
	GenerateBarcode(context.Context, *GenerateBarcodeRequest) (*GenerateBarcodeResponse, error)
	GetBarcode(context.Context, *GetBarcodeRequest) (*GetBarcodeResponse, error)
	SearchBarcodes(context.Context, *SearchBarcodesRequest) (*SearchBarcodesResponse, error)
	DeleteBarcode(context.Context, *DeleteBarcodeRequest) (*DeleteBarcodeResponse, error)
	mustEmbedUnimplementedBarcodeServiceServer()
}

// UnimplementedBarcodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBarcodeServiceServer struct{}

func (UnimplementedBarcodeServiceServer) GenerateBarcode(context.Context, *GenerateBarcodeRequest) (*GenerateBarcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBarcode not implemented")
}
func (UnimplementedBarcodeServiceServer) GetBarcode(context.Context, *GetBarcodeRequest) (*GetBarcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarcode not implemented")
}
func (UnimplementedBarcodeServiceServer) SearchBarcodes(context.Context, *SearchBarcodesRequest) (*SearchBarcodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBarcodes not implemented")
}
func (UnimplementedBarcodeServiceServer) DeleteBarcode(context.Context, *DeleteBarcodeRequest) (*DeleteBarcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarcode not implemented")
}
func (UnimplementedBarcodeServiceServer) mustEmbedUnimplementedBarcodeServiceServer() {}
func (UnimplementedBarcodeServiceServer) testEmbeddedByValue()                        {}

// UnsafeBarcodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarcodeServiceServer will
// result in compilation errors.
type UnsafeBarcodeServiceServer interface {
	mustEmbedUnimplementedBarcodeServiceServer()
}

func RegisterBarcodeServiceServer(s grpc.ServiceRegistrar, srv BarcodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBarcodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BarcodeService_ServiceDesc, srv)
}

func _BarcodeService_GenerateBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBarcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcodeServiceServer).GenerateBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarcodeService_GenerateBarcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcodeServiceServer).GenerateBarcode(ctx, req.(*GenerateBarcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarcodeService_GetBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcodeServiceServer).GetBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarcodeService_GetBarcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcodeServiceServer).GetBarcode(ctx, req.(*GetBarcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarcodeService_SearchBarcodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBarcodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcodeServiceServer).SearchBarcodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarcodeService_SearchBarcodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcodeServiceServer).SearchBarcodes(ctx, req.(*SearchBarcodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarcodeService_DeleteBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcodeServiceServer).DeleteBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarcodeService_DeleteBarcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcodeServiceServer).DeleteBarcode(ctx, req.(*DeleteBarcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarcodeService_ServiceDesc is the grpc.ServiceDesc for BarcodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarcodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barcode.BarcodeService",
	HandlerType: (*BarcodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateBarcode",
			Handler:    _BarcodeService_GenerateBarcode_Handler,
		},
		{
			MethodName: "GetBarcode",
			Handler:    _BarcodeService_GetBarcode_Handler,
		},
		{
			MethodName: "SearchBarcodes",
			Handler:    _BarcodeService_SearchBarcodes_Handler,
		},
		{
			MethodName: "DeleteBarcode",
			Handler:    _BarcodeService_DeleteBarcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barcode_service.proto",
}
